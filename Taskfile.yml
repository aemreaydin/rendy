version: "3"

vars:
  BUILD_TYPE: '{{ .BUILD_TYPE | default "Debug" }}'
  LIB_EXT: '{{if eq OS "windows"}}.lib{{else if eq OS "darwin"}}.dylib{{else}}.so{{end}}'
  LIB_PREFIX: '{{if eq OS "windows"}}{{else}}lib{{end}}'
  PRESET_OS: '{{if eq OS "windows"}}windows{{else if eq OS "darwin"}}macos{{else}}linux{{end}}'

tasks:
  default:
    desc: "Build and run the application"
    deps: [build]
    cmds:
      - task: run

  # Clean Build Artifacts
  clean-windows:
    platforms: [windows]
    cmds:
      - pwsh -c "if (Test-Path build) { Remove-Item build -Recurse -Force }"
      - pwsh -c "if (Test-Path CMakeUserPresets.json) { Remove-Item CMakeUserPresets.json }"
      - pwsh -c "if (Test-Path compile_commands.json) { Remove-Item compile_commands.json }"
    internal: true
  clean-unix:
    platforms: [linux, darwin]
    cmds:
      - rm -rf build/
      - rm -f CMakeUserPresets.json
      - rm -f compile_commands.json
    internal: true
  clean:
    desc: "Clean build artifacts"
    cmds:
      - task: clean-windows
      - task: clean-unix

  conan-install:
    desc: "Install Conan dependencies"
    vars:
      BUILD_DIR: "build/{{.BUILD_TYPE}}"
    sources:
      - conanfile.py
    generates:
      - "{{.BUILD_DIR}}/generators/conan_toolchain.cmake"
      - "{{.BUILD_DIR}}/generators/CMakePresets.json"
    cmds:
      - conan install . --output-folder={{.BUILD_DIR}} --build=missing --settings=build_type={{.BUILD_TYPE}}
  cmake-configure:
    desc: "Configure CMake"
    deps:
      - task: conan-install
        vars: { BUILD_TYPE: "{{.BUILD_TYPE}}" }
    vars:
      BUILD_DIR: "build/{{.BUILD_TYPE}}"
    sources:
      - "**/CMakeLists.txt"
    generates:
      - "{{.BUILD_DIR}}/CMakeCache.txt"
    cmds:
      - cmake --preset conan-{{.PRESET_OS}}-{{.BUILD_TYPE | lower}}
      - cmd: "ln {{.BUILD_DIR}}/compile_commands.json compile_commands.json"
        platforms: [linux, darwin]

  # Build Steps
  build-libs:
    desc: "Build shared libraries"
    deps:
      - task: cmake-configure
        vars: { BUILD_TYPE: "{{.BUILD_TYPE}}" }
    vars:
      BUILD_DIR: "build/{{.BUILD_TYPE}}"
    sources:
      - modules/**/*.hpp
      - modules/**/*.cpp
    generates:
      - "{{.BUILD_DIR}}/lib/{{.LIB_PREFIX}}rendy_graphics{{.LIB_EXT}}"
    cmds:
      - cmake --build {{.BUILD_DIR}} --target rendy_graphics --config {{.BUILD_TYPE}} --parallel
  build-exe:
    desc: "Build main executable"
    vars:
      BUILD_DIR: "build/{{.BUILD_TYPE}}"
      BIN_DIR: "build/{{.BUILD_TYPE}}/bin"
    deps:
      - task: build-libs
        vars: { BUILD_TYPE: "{{.BUILD_TYPE}}" }
    sources:
      - src/**/*.cpp
      - src/**/*.hpp
      - modules/**/*.hpp
      - modules/**/*.cpp
    generates:
      - "{{.BIN_DIR}}/rendy{{exeExt}}"
    cmds:
      - cmake --build {{.BUILD_DIR}} --target rendy --config {{.BUILD_TYPE}} --parallel
  build:
    desc: "Build the complete application"
    deps:
      - task: build-exe
        vars: { BUILD_TYPE: "{{.BUILD_TYPE}}" }
      - task: copy-assets
        vars: { BUILD_TYPE: "{{.BUILD_TYPE}}" }

  run:
    desc: "Run the application"
    deps:
      - task: build
        vars: { BUILD_TYPE: "{{.BUILD_TYPE}}" }
    vars:
      BIN_DIR: "build/{{.BUILD_TYPE}}/bin"
    dir: "{{.BIN_DIR}}"
    cmds:
      - cmd: pwsh -c "Start-Process -FilePath 'rendy{{exeExt}}'"
        platforms: [windows]
      - cmd: ./rendy{{exeExt}}
        platforms: [linux, darwin]

  debug:
    desc: "Build and run in debug mode"
    cmds:
      - task: run

  release:
    desc: "Build in release mode"
    cmds:
      - task: run
        vars: { BUILD_TYPE: "Release" }

  format:
    desc: "Format C++ code"
    cmds:
      - cmd: find . -name "*.cpp" -o -name "*.hpp" | grep -v build | xargs clang-format -i
        platforms: [linux, darwin]
      - cmd: pwsh -c 'Get-ChildItem -Path . -Recurse -Include '*.cpp','*.hpp' | ForEach-Object { clang-format -i $_.FullName }'
        platforms: [windows]
      - cmd: pwsh -c 'Get-ChildItem -Filter "CMakeLists.txt" | ForEach-Object { gersemi -i $_.FullName }'

  copy-assets:
    desc: "Copy assets and shaders to executable directory"
    vars:
      BIN_DIR: "build/{{.BUILD_TYPE}}/bin"
    sources:
      - assets/**/*
    generates:
      - "{{.BIN_DIR}}/assets/**/*"
    cmds:
      - cmd: pwsh -c "Copy-Item assets {{.BIN_DIR}}/assets -Recurse -Force"
        platforms: [windows]
      - cmd: mkdir -p {{.BIN_DIR}}/assets && cp -r assets/* {{.BIN_DIR}}/assets/
        platforms: [linux, darwin]

  # dev:
  #   desc: "Development build with sanitizers and analysis tools"
  #   vars:
  #     BUILD_TYPE: Debug
  #   cmds:
  #     - task: conan-install
  #       vars:
  #         BUILD_TYPE: Debug
  #     - cmake --preset conan-default -DSANITIZE_ADDRESS=ON -DENABLE_CLANG_TIDY=ON
  #     - task: build-libs
  #       vars:
  #         BUILD_TYPE: Debug
  #     - task: build-exe
  #       vars:
  #         BUILD_TYPE: Debug
  #     - task: copy-assets
  #       vars:
  #         BUILD_TYPE: Debug
